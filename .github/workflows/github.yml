name: CI

on: [push]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java_version: [1.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java_version }}

      - name: Generate cache key
        run: ./checksum.sh checksum.txt

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - uses: actions/cache@v1.1.0
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('checksum.txt') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew presentation:assembleDebug presentation:lintDebug testDebug dependencyUpdates --scan

      - name: Upload build outputs
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: build-outputs
          path: presentation/build/outputs

      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: build-reports
          path: presentation/build/reports

      - name: Upload dependency updates report
        uses: actions/upload-artifact@v1
        with:
          name: dependency-updates
          path: build/dependencyUpdates

      - name: Copy test results
        if: always()
        run: |
          mkdir -p junit
          find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} junit/ \;
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: junit-results
          path: junit
